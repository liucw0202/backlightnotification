diff --git a/Kernel/arch/arm/mach-s5pv210/mach-aries.c b/Kernel/arch/arm/mach-s5pv210/mach-aries.c
index 3a7253b..9b3019d 100644
--- a/Kernel/arch/arm/mach-s5pv210/mach-aries.c
+++ b/Kernel/arch/arm/mach-s5pv210/mach-aries.c
@@ -2,6 +2,7 @@
  *
  * Copyright (c) 2010 Samsung Electronics Co., Ltd.
  *		http://www.samsung.com/
+ * Copyright (C) 2010 Michael Richter (alias neldar)
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -2120,6 +2121,11 @@ static void smdkc110_power_off(void)
 	while (1) ;
 }
 
+// not the best solution, but a working one.
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+extern bool BacklightNotification_enabled;
+#endif
+
 void s3c_config_sleep_gpio_table(int array_size, unsigned int (*gpio_table)[3])
 {
 	u32 i, gpio;
@@ -2131,6 +2137,14 @@ void s3c_config_sleep_gpio_table(int array_size, unsigned int (*gpio_table)[3])
 		s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][2]);
 	}
 
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	if(BacklightNotification_enabled)
+	{
+	    s3c_gpio_slp_cfgpin(_3_GPIO_TOUCH_EN, S3C_GPIO_SLP_OUT1);
+	    s3c_gpio_slp_setpull_updown(_3_GPIO_TOUCH_EN, S3C_GPIO_PULL_DOWN);
+	}
+#endif
+
 	if (gpio_get_value(GPIO_PS_ON))
 	{
 		s3c_gpio_slp_setpull_updown(GPIO_ALS_SDA_28V, S3C_GPIO_PULL_NONE);
diff --git a/Kernel/drivers/input/keyboard/Kconfig b/Kernel/drivers/input/keyboard/Kconfig
index 986a949..d174183 100644
--- a/Kernel/drivers/input/keyboard/Kconfig
+++ b/Kernel/drivers/input/keyboard/Kconfig
@@ -484,5 +484,13 @@ config KEYPAD_CYPRESS_TOUCH
 
 	  To compile this driver as a module, choose M here: the
 	  module will be called melfas-touchkey.
+
+config KEYPAD_CYPRESS_TOUCH_USE_BLN
+	bool "Cypress touch keypad: use backlight notification"
+	depends on KEYPAD_CYPRESS_TOUCH
+	default y
+	help
+	  Say Y here to enable the backlight notification
+	  for android led-notification (modified liblight needed)
 	 
 endif
diff --git a/Kernel/drivers/input/keyboard/cypress/cypress-touchkey.c b/Kernel/drivers/input/keyboard/cypress/cypress-touchkey.c
index 08bf33e..9e93de9 100644
--- a/Kernel/drivers/input/keyboard/cypress/cypress-touchkey.c
+++ b/Kernel/drivers/input/keyboard/cypress/cypress-touchkey.c
@@ -2,6 +2,7 @@
  * Driver for keys on GPIO lines capable of generating interrupts.
  *
  * Copyright 2005 Phil Blundell
+ * Copyright (C) 2010 Michael Richter (alias neldar)
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -56,6 +57,14 @@ Melfas touchkey register
 
 #define DEVICE_NAME "melfas-touchkey"
 
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+//todo: update this everytime you modify BacklightNotification
+#define BACKLIGHTNOTIFICATION_VERSION 6
+
+#define BACKLIGHT_ON 1
+#define BACKLIGHT_OFF 2
+#endif
+
 static int touchkey_keycode[5] =
     { NULL, KEY_BACK, KEY_MENU, KEY_ENTER, KEY_END };
 
@@ -90,6 +99,14 @@ static int i2c_touchkey_probe(struct i2c_client *client,
 extern int get_touchkey_firmware(char *version);
 static int touchkey_led_status = 0;
 
+
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+static bool touchkey_controller_vdd_on = false;
+static bool backlight_notification_allowed = false;	//indicates if BLN function is enabled/allowed
+bool BacklightNotification_enabled= false;		//indicates ongoing LED Notification
+EXPORT_SYMBOL(BacklightNotification_enabled);		//export for mach-aries.c
+#endif
+
 struct i2c_driver touchkey_i2c_driver = {
 	.driver = {
 		   .name = "melfas_touchkey_driver",
@@ -109,6 +126,30 @@ static void set_touchkey_debug(char value)
 	touchkey_debug_count++;
 }
 
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+static void touchkey_power_on(void){
+    gpio_direction_output(_3_GPIO_TOUCH_EN, 1);
+#if !defined(CONFIG_ARIES_NTT)
+    gpio_direction_output(_3_GPIO_TOUCH_CE, 1);
+#endif
+    touchkey_controller_vdd_on = true;
+}
+
+static void touchkey_power_off(void){
+    touchkey_controller_vdd_on = false;
+    gpio_direction_output(_3_GPIO_TOUCH_EN, 0);
+#if !defined(CONFIG_ARIES_NTT)
+    gpio_direction_output(_3_GPIO_TOUCH_CE, 0);
+#endif
+}
+
+static void touchkey_power_off_with_i2c(void){
+    touchkey_power_off();
+    gpio_direction_output(_3_TOUCH_SDA_28V, 0);
+    gpio_direction_output(_3_TOUCH_SCL_28V, 0);
+}
+#endif
+
 static int i2c_touchkey_read(u8 reg, u8 * val, unsigned int len)
 {
 	int err;
@@ -142,7 +183,11 @@ static int i2c_touchkey_write(u8 * val, unsigned int len)
 	unsigned char data[2];
 	int retry = 2;
 
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	if (touchkey_driver == NULL) {
+#else
 	if ((touchkey_driver == NULL) || !(touchkey_enable == 1)) {
+#endif
 		printk(KERN_DEBUG "touchkey is not enabled.W\n");
 		return -ENODEV;
 	}
@@ -189,7 +234,11 @@ void touchkey_work_func(struct work_struct *p)
 					 touchkey_keycode[2], 0);
 			retry = 10;
 			while (retry--) {
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+				touchkey_power_off();
+#else
 				gpio_direction_output(_3_GPIO_TOUCH_EN, 0);
+#endif
 				mdelay(300);
 				init_hw();
 				if (i2c_touchkey_read(KEYCODE_REG, data, 3) >=
@@ -206,12 +255,16 @@ void touchkey_work_func(struct work_struct *p)
 			//touchkey die , do not enable touchkey
 			//enable_irq(IRQ_TOUCH_INT);
 			touchkey_enable = -1;
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+			touchkey_power_off_with_i2c();
+#else
 			gpio_direction_output(_3_GPIO_TOUCH_EN, 0);
 #if !defined(CONFIG_ARIES_NTT)
 			gpio_direction_output(_3_GPIO_TOUCH_CE, 0);
 #endif
 			gpio_direction_output(_3_TOUCH_SDA_28V, 0);
 			gpio_direction_output(_3_TOUCH_SCL_28V, 0);
+#endif
 			printk("%s touchkey died\n", __func__);
 			set_touchkey_debug('D');
 			return;
@@ -298,12 +351,16 @@ static void melfas_touchkey_early_suspend(struct early_suspend *h)
 	}
 
 	disable_irq(IRQ_TOUCH_INT);
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	touchkey_power_off_with_i2c();
+#else
 	gpio_direction_output(_3_GPIO_TOUCH_EN, 0);
 #if !defined(CONFIG_ARIES_NTT)
 	gpio_direction_output(_3_GPIO_TOUCH_CE, 0);
 #endif
 	gpio_direction_output(_3_TOUCH_SDA_28V, 0);
 	gpio_direction_output(_3_TOUCH_SCL_28V, 0);
+#endif
 }
 
 static void melfas_touchkey_early_resume(struct early_suspend *h)
@@ -315,10 +372,14 @@ static void melfas_touchkey_early_resume(struct early_suspend *h)
 		       touchkey_enable);
 		return;
 	}
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	touchkey_power_on();
+#else
 	gpio_direction_output(_3_GPIO_TOUCH_EN, 1);
 #if !defined(CONFIG_ARIES_NTT)
 	gpio_direction_output(_3_GPIO_TOUCH_CE, 1);
 #endif
+#endif
 	msleep(50);
 
 	//clear interrupt
@@ -406,10 +467,14 @@ static int i2c_touchkey_probe(struct i2c_client *client,
 
 static void init_hw(void)
 {
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	touchkey_power_on();
+#else
 	gpio_direction_output(_3_GPIO_TOUCH_EN, 1);
 #if !defined(CONFIG_ARIES_NTT)
 	gpio_direction_output(_3_GPIO_TOUCH_CE, 1);
 #endif
+#endif
 	msleep(200);
 	s3c_gpio_setpull(_3_GPIO_TOUCH_INT, S3C_GPIO_PULL_NONE);
 	set_irq_type(IRQ_TOUCH_INT, IRQ_TYPE_LEVEL_LOW);
@@ -560,6 +625,15 @@ static ssize_t touch_update_read(struct device *dev,
 	return count;
 }
 
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+static void set_backlight(u8 backlight_status){
+    if (touchkey_controller_vdd_on){
+	touchkey_led_status = backlight_status;
+	i2c_touchkey_write(&backlight_status, 1);
+    }
+}
+#endif
+
 static ssize_t touch_led_control(struct device *dev,
 				 struct device_attribute *attr, const char *buf,
 				 size_t size)
@@ -567,8 +641,18 @@ static ssize_t touch_led_control(struct device *dev,
 	unsigned char data;
 	if (sscanf(buf, "%d\n", &data) == 1) {
 		printk(KERN_DEBUG "touch_led_control: %d \n", data);
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+		if ((touchkey_enable == 1)) {
+		    if (data == 1)
+			set_backlight(BACKLIGHT_ON);
+		    if (data == 2)
+			set_backlight(BACKLIGHT_OFF);
+		} else
+		    printk(KERN_DEBUG "touchkey is not enabled.W\n");
+#else
 		i2c_touchkey_write(&data, 1);
 		touchkey_led_status = data;
+#endif
 	} else
 		printk("touch_led_control Error\n");
 
@@ -584,18 +668,26 @@ static ssize_t touchkey_enable_disable(struct device *dev,
 	if (*buf == '0') {
 		set_touchkey_debug('d');
 		disable_irq(IRQ_TOUCH_INT);
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+		touchkey_power_off();
+#else
 		gpio_direction_output(_3_GPIO_TOUCH_EN, 0);
 #if !defined(CONFIG_ARIES_NTT)
 		gpio_direction_output(_3_GPIO_TOUCH_CE, 0);
 #endif
+#endif
 		touchkey_enable = -2;
 	} else if (*buf == '1') {
 		if (touchkey_enable == -2) {
 			set_touchkey_debug('e');
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+			touchkey_power_on();
+#else
 			gpio_direction_output(_3_GPIO_TOUCH_EN, 1);
 #if !defined(CONFIG_ARIES_NTT)
 			gpio_direction_output(_3_GPIO_TOUCH_CE, 1);
 #endif
+#endif
 			touchkey_enable = 1;
 			enable_irq(IRQ_TOUCH_INT);
 		}
@@ -606,6 +698,118 @@ static ssize_t touchkey_enable_disable(struct device *dev,
 	return size;
 }
 
+
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+
+static void enable_led_notification(void){
+    if (backlight_notification_allowed){
+	if (touchkey_enable != 1){
+	    touchkey_power_on();
+	    mdelay(100);
+	    
+	    /* enable touchkey vdd in sleep mode */
+	    BacklightNotification_enabled = true;
+	    
+	    /* write to i2cbus, enable backlights */
+	    set_backlight(BACKLIGHT_ON);
+	    
+	    printk(KERN_DEBUG "%s: notification led enabled\n", __FUNCTION__);
+	} 
+	else
+	    printk(KERN_DEBUG "%s: cannot set notification led, touchkeys are enabled\n",__FUNCTION__);
+    }
+}
+
+static void disable_led_notification(void){
+    printk(KERN_DEBUG "%s: notification led disabled\n", __FUNCTION__);
+    /* disable touchkey vdd in sleep mode */
+    BacklightNotification_enabled = false;
+    
+    if (touchkey_enable != 1){
+	/* write to i2cbus, disable backlights */
+	set_backlight(BACKLIGHT_OFF);
+    }
+}
+
+static ssize_t backlightnotification_status_read(struct device *dev, struct device_attribute *attr, char *buf) {
+    return sprintf(buf,"%u\n",(backlight_notification_allowed ? 1 : 0));
+}
+static ssize_t backlightnotification_status_write(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+    unsigned int data;
+    if(sscanf(buf, "%u\n", &data) == 1) {
+	printk(KERN_DEBUG "%s: %u \n", __FUNCTION__, data);
+	if(data == 0 || data == 1){
+	    
+	    if(data == 1){
+		printk(KERN_DEBUG "%s: backlightnotification function enabled\n", __FUNCTION__);
+		backlight_notification_allowed = true;
+	    }
+	    
+	    if(data == 0){
+		printk(KERN_DEBUG "%s: backlightnotification function disabled\n", __FUNCTION__);
+		backlight_notification_allowed = false;
+		if (BacklightNotification_enabled){
+			disable_led_notification();
+		}
+	    }
+	}
+	else
+	    printk(KERN_DEBUG "%s: wrong input %u\n", __FUNCTION__, data);
+    }
+    else
+	printk("%s: input error\n", __FUNCTION__);
+    
+    return size;
+}
+
+static ssize_t notification_led_status_read(struct device *dev, struct device_attribute *attr, char *buf) {
+    return sprintf(buf,"%u\n", (BacklightNotification_enabled ? 1 : 0)); //todo: boolean for notification_led
+}
+
+static ssize_t notification_led_status_write(struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
+{
+    unsigned int data;
+
+    if(sscanf(buf, "%u\n", &data) == 1) {
+	if(data == 0 || data == 1){
+	    printk(KERN_DEBUG "%s: %u \n", __FUNCTION__, data);
+	    if (data == 1)
+		enable_led_notification();
+
+	    if(data == 0) 
+		disable_led_notification();
+
+	} else
+	    printk(KERN_DEBUG "%s: wrong input %u\n", __FUNCTION__, data);
+    } else
+	printk("%s: input error\n", __FUNCTION__);
+
+    return size;
+}
+
+static ssize_t backlightnotification_version(struct device *dev, struct device_attribute *attr, char *buf) {
+    return sprintf(buf, "%u\n", BACKLIGHTNOTIFICATION_VERSION);
+}
+
+static DEVICE_ATTR(enabled, S_IRUGO | S_IWUGO , backlightnotification_status_read, backlightnotification_status_write);
+static DEVICE_ATTR(notification_led, S_IRUGO | S_IWUGO , notification_led_status_read, notification_led_status_write);
+static DEVICE_ATTR(version, S_IRUGO , backlightnotification_version, NULL);
+
+/*
+struct file_operations backlightnotification_device_fops = {
+	.owner = THIS_MODULE,
+	.read = null,
+};
+*/
+
+static struct miscdevice backlightnotification_device = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = "backlightnotification",
+//	.fops	= &mymisc_fops,
+};
+#endif
+
 static DEVICE_ATTR(touch_version, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH,
 		   touch_version_read, touch_version_write);
 static DEVICE_ATTR(touch_update, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH,
@@ -615,6 +819,7 @@ static DEVICE_ATTR(brightness, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH, NULL,
 static DEVICE_ATTR(enable_disable, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH, NULL,
 		   touchkey_enable_disable);
 
+
 static int __init touchkey_init(void)
 {
 	int ret = 0;
@@ -672,6 +877,29 @@ static int __init touchkey_init(void)
 		pr_err("Failed to create device file(%s)!\n",
 		       dev_attr_enable_disable.attr.name);
 	}
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	ret = 0;
+	ret = misc_register(&backlightnotification_device);
+	if (ret) {
+		printk("%s misc_register fail\n", __FUNCTION__, backlightnotification_device.name);
+	}
+	//add the backlightnotification attributes
+	if (device_create_file(backlightnotification_device.this_device, &dev_attr_enabled) < 0)
+	{
+		printk("%s device_create_file fail dev_attr_touch_update\n", __FUNCTION__);
+		pr_err("Failed to create device file(%s)!\n", dev_attr_enabled.attr.name);
+	}
+	if (device_create_file(backlightnotification_device.this_device, &dev_attr_notification_led) < 0)
+	{
+		printk("%s device_create_file fail dev_attr_touch_update\n", __FUNCTION__);
+		pr_err("Failed to create device file(%s)!\n", dev_attr_notification_led.attr.name);
+	}
+	if (device_create_file(backlightnotification_device.this_device, &dev_attr_version) < 0)
+	{
+		printk("%s device_create_file fail dev_attr_touch_update\n", __FUNCTION__);
+		pr_err("Failed to create device file(%s)!\n", dev_attr_version.attr.name);
+	}
+#endif
 
 	touchkey_wq = create_singlethread_workqueue("melfas_touchkey_wq");
 	if (!touchkey_wq)
@@ -703,10 +931,14 @@ static int __init touchkey_init(void)
 			set_touchkey_debug('f');
 		}
 		if (retry <= 0) {
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+			touchkey_power_off();
+#else
 			gpio_direction_output(_3_GPIO_TOUCH_EN, 0);
 #if !defined(CONFIG_ARIES_NTT)
 			gpio_direction_output(_3_GPIO_TOUCH_CE, 0);
 #endif
+#endif
 			msleep(300);
 		}
 		init_hw();	//after update, re initalize.
@@ -727,6 +959,9 @@ static void __exit touchkey_exit(void)
 	printk("%s \n", __FUNCTION__);
 	i2c_del_driver(&touchkey_i2c_driver);
 	misc_deregister(&touchkey_update_device);
+#ifdef CONFIG_KEYPAD_CYPRESS_TOUCH_USE_BLN
+	misc_deregister(&backlightnotification_device);
+#endif
 	if (touchkey_wq)
 		destroy_workqueue(touchkey_wq);
 #if !defined(CONFIG_ARIES_NTT)
